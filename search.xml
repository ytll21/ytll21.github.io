<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解构再组合 - 「你不知道的JavaScript」（一）</title>
      <link href="/2020/09/04/jie-gou-zai-zu-he-ni-bu-zhi-dao-de-javascript-yi/"/>
      <url>/2020/09/04/jie-gou-zai-zu-he-ni-bu-zhi-dao-de-javascript-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="解构再组合-「你不知道的JavaScript」（一）"><a href="#解构再组合-「你不知道的JavaScript」（一）" class="headerlink" title="解构再组合 - 「你不知道的JavaScript」（一）"></a>解构再组合 - 「你不知道的JavaScript」（一）</h1><h2 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h2><h3 id="不要用eval"><a href="#不要用eval" class="headerlink" title="不要用eval"></a>不要用eval</h3><p>考虑如下代码:</p><pre><code>function foo(str, a) ｛     eval( str );    console.log( a, b );｝var b = 2;foo( "var b = 3;", 1 );</code></pre><p>想30秒，你认为会输出什么？</p><p>是1, 3。也就是eval导致了原本在外部定义的变量b，被eval动态生成的局部变量b给替换了。</p><p>所以如果eval的内容能够被最终用户修改的话，那这会带来不可控的后果。</p><p>最后，在程序中动态生成代码的使用场景非常罕见，因为它所带来的好处无法抵消性能上的损失。</p><h3 id="最小暴露原则"><a href="#最小暴露原则" class="headerlink" title="最小暴露原则"></a>最小暴露原则</h3><p>考虑如下代码：</p><pre><code>function doSomething(a) ｛    b = a + doSomethingElse( a * 2 );    console.log( b * 3 ); ｝function doSomethingElse(a) ｛     return a - 1;｝var b;doSomething( 2 ); // 15</code></pre><p>你觉得它的问题在哪里？</p><p>答案是变量b被无意义的暴露在了外部环境，如果外部代码无意识的修改了b的值，就会影响到doSomething函数的正确输出。下面的代码就演示了如何避免这种可能：</p><pre><code>function doSomething(a) ｛     function doSomethingElse(a) ｛        return a - 1;     ｝    var b;    b = a + doSomethingElse( a * 2 );    console.log( b * 3 ); ｝doSomething( 2 ); // 15</code></pre><h3 id="在使用变量前，一定要声明该变量"><a href="#在使用变量前，一定要声明该变量" class="headerlink" title="在使用变量前，一定要声明该变量"></a>在使用变量前，一定要声明该变量</h3><p>考虑如下代码：</p><pre><code>function foo() ｛     function bar(a) ｛        i = 3;        console.log( a + i );     ｝    for (var i=0; i&lt;10; i++) ｛        bar( i * 2 );    ｝ ｝foo();</code></pre><p>执行上面这段代码，会发生什么事情？是可怕的无限循环！因为 i = 3修改了i的值，导致循环无法正确结束。</p><p>所以要避免这种情况发生，就要记得在使用局部变量前，一定要声明它，如下所示：</p><pre><code>function foo() ｛     function bar(a) ｛        var i = 3;        console.log( a + i );     ｝    for (var i=0; i&lt;10; i++) ｛        bar( i * 2 );    ｝ ｝foo();</code></pre><h3 id="匿名和具名函数的区别"><a href="#匿名和具名函数的区别" class="headerlink" title="匿名和具名函数的区别"></a>匿名和具名函数的区别</h3><p>看如下两段代码的区别在哪里：</p><pre><code>setTimeout( function() ｛     console.log("I waited 1 second!");｝, 1000 );setTimeout( function timeoutHandler() ｛     console.log( "I waited 1 second!" );｝, 1000 );</code></pre><p>考虑匿名函数的缺点：</p><ol><li>匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难。</li><li>如果没有函数名，当函数需要引用自身时只能使用已经过期的arguments.callee引用， 比如在递归中。另一个函数需要引用自身的例子，是在事件触发后事件监听器需要解绑 自身。</li><li>匿名函数省略了对于代码可读性/可理解性很重要的函数名。一个描述性的名称可以让 代码不言自明。</li></ol><p>解决方案：给函数表达式指定一个函数名可以有效解决以上问题。始终给函数表达式命名是一个最佳实践</p><h3 id="用let而不是var"><a href="#用let而不是var" class="headerlink" title="用let而不是var"></a>用let而不是var</h3><p>考虑如下代码：</p><pre><code>var foo = true;if (foo) ｛    var bar = foo * 2;    bar = something( bar );     console.log( bar );｝</code></pre><p>当在if的代码块中定义了变量bar，bar随后可以在if语句块外也能够被调用，这样就污染了整个函数环境，而这是我们不想看到的。而用了let就可以避免这一点。</p><pre><code>var foo = true;if (foo) ｛    let bar = foo * 2;    bar = something( bar );     console.log( bar );｝console.log( bar ); // ReferenceError</code></pre><h3 id="理解提升"><a href="#理解提升" class="headerlink" title="理解提升"></a>理解提升</h3><p>考虑如下代码：</p><pre><code>a = 2;var a; console.log( a );</code></pre><p>编译器对声明提升后，实际执行的代码：</p><pre><code>var a;a = 2; console.log( a );</code></pre><p>试着说如下代码执行结果吧：</p><pre><code>console.log( a ); var a = 2;</code></pre><p>它的实际执行代码如下：</p><pre><code>var a; console.log( a ); a = 2;</code></pre><p>所以对JS而言，要记住：先有蛋(声明)，后有鸡(赋值)。</p><p>我们习惯将var a = 2;看作一个声明，而实际上JavaScript引擎并不这么认为。它将var a<br>和 a = 2 当作两个单独的声明，第一个是编译阶段的任务，而第二个则是执行阶段的任务。</p><p>这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。 可以将这个过程形象地想象成所有的声明(变量和函数)都会被“移动”到各自作用域的 最顶端，这个过程被称为提升。</p><h3 id="理解闭包"><a href="#理解闭包" class="headerlink" title="理解闭包"></a>理解闭包</h3><p>考虑如下代码的最终输出是什么：</p><pre><code>for (var i=1; i&lt;=5; i++) ｛     setTimeout( function timer() ｛        console.log( i );     ｝, i*1000 );｝</code></pre><p>每秒输出6，而不是设想中的每秒输出1、2…5，因为闭包指向的都是同一个共有变量。想一下，代码要怎么改？</p><pre><code>for (var i=1; i&lt;=5; i++) ｛     (function(result) ｛        setTimeout( function timer() ｛            console.log( result );         ｝, result*1000 );    ｝)(i);｝</code></pre><p>答案是利用IIFE技术，把i作为函数的参数传递，从而生成一个新的作用域，把每次迭代的i的值封闭在新的作用域内。</p><p>更好的做法，利用let：</p><pre><code>for (let i=1; i&lt;=5; i++) ｛     setTimeout( function timer() ｛        console.log( i );     ｝, i*1000 );｝</code></pre><h3 id="this-this-this"><a href="#this-this-this" class="headerlink" title="this, this, this"></a>this, this, this</h3><p>考虑如下代码的最终输出是什么：</p><pre><code>function foo(num) ｛    console.log( "foo: " + num );    // 记录 foo 被调用的次数    this.count++; ｝foo.count = 0;var i;for (i=0; i&lt;10; i++) ｛     if (i &gt; 5) ｛        foo( i );     ｝｝console.log( foo.count );</code></pre><p>是0，想想为什么？</p><p>因为this指向的不是foo的count，它指向的是全局的count。为什么会这样？<strong>因为在JS中，this指向的对象，是在运行时通过上下文实时获取，而不是在编译期间决定的。</strong></p><pre><code>function foo(num) ｛    console.log( "foo: " + num );    // 记录 foo 被调用的次数    this.count++; ｝foo.count = 0;var i;for (i=0; i&lt;10; i++) ｛     if (i &gt; 5) ｛        foo.call( foo, i );     ｝｝console.log( foo.count ); // 4</code></pre><p>通过call方法传递foo自身作为上下文参数，我们就能成功将this指向到foo。</p><h3 id="this的绑定规则"><a href="#this的绑定规则" class="headerlink" title="this的绑定规则"></a>this的绑定规则</h3><h4 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h4><pre><code>function foo() ｛     console.log( this.a );｝var a = 2; foo(); // 2</code></pre><p>可以看到，当调用this.a的时候，应用了this的默认绑定，此时的this指向的全局对象。</p><p>那么我们怎么知道这里应用了默认绑定呢?可以通过分析调用位置来看看 foo() 是如何调用的。在代码中，foo() 是直接使用不带任何修饰的函数引用进行调用的，因此只能使用默认绑定，无法应用其他规则。</p><h4 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h4><p>思考如下代码：</p><pre><code>function foo() ｛     console.log( this.a );｝var obj = ｛     a: 2,    foo: foo ｝;obj.foo(); // 2</code></pre><p>这和我们平时写的代码有点接近了。原理是当函数引用有上下文对象时，隐式绑定规则会把函数调用中的 this 绑定到这个上下文对象。</p><p>对象属性引用链中只有最顶层或者说最后一层会影响调用位置。思考如下的代码，最终的输出结果是什么：</p><pre><code>function foo() ｛     console.log( this.a );｝var obj2 = ｛     a: 42,    foo: foo ｝;var obj1 = ｛     a: 2,    obj2: obj2 ｝;obj1.obj2.foo();</code></pre><h5 id="隐式绑定的风险-隐式丢失"><a href="#隐式绑定的风险-隐式丢失" class="headerlink" title="隐式绑定的风险 - 隐式丢失"></a>隐式绑定的风险 - 隐式丢失</h5><p>思考下面的代码的最终输出:</p><pre><code>function foo() ｛     console.log( this.a );｝function doFoo(fn) ｛    fn();｝var obj = ｛     a: 2,    foo: foo ｝;var a = "oops, global";doFoo( obj.foo );</code></pre><p>参数传递其实就是一种隐式赋值，因此我们传入函数时也会被隐式赋值。因此实际上，代码最终引用的是 foo 函数本身，即一个不带任何修饰的函数调用，因此应用了默认绑定。</p><h4 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h4><p>就像我们刚才看到的那样，在分析隐式绑定时，我们必须在一个对象内部包含一个指向函数的属性，并通过这个属性间接引用函数，从而把 this 间接(隐式)绑定到这个对象上。 </p><p>那么如果我们不想在对象内部包含函数引用，而想在某个对象上强制调用函数，该怎么做呢?</p><p>具体点说，可以使用函数的 call(..) 和 apply(..) 方法。</p><pre><code>function foo() ｛     console.log( this.a );｝var obj = ｛     a:2｝;foo.call( obj ); // 2</code></pre><p>可惜，显式绑定无法解决我们之前提出的丢失绑定问题。这种时候，可以用硬绑定。</p><h5 id="硬绑定"><a href="#硬绑定" class="headerlink" title="硬绑定"></a>硬绑定</h5><pre><code>function foo(something) ｛      console.log( this.a, something );      return this.a + something;｝// 简单的辅助绑定函数 function bind(fn, obj) ｛    return function() ｛         return fn.apply(obj, arguments );    ｝; ｝var obj = ｛     a:2｝;var bar = bind( foo, obj );var b = bar( 3 ); // 2 3 console.log( b ); // 5</code></pre><p>由于硬绑定是一种非常常用的模式，所以在 ES5 中提供了内置的方法 Function.prototype.bind，它的用法如下:</p><pre><code>function foo(something) ｛     console.log( this.a, something );     return this.a + something;｝var obj = ｛     a:2｝;var bar = foo.bind( obj );var b = bar( 3 ); // 2 3 console.log( b ); // 5</code></pre><h4 id="new绑定（略）"><a href="#new绑定（略）" class="headerlink" title="new绑定（略）"></a>new绑定（略）</h4><h4 id="箭头函数（略）"><a href="#箭头函数（略）" class="headerlink" title="箭头函数（略）"></a>箭头函数（略）</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读「Java By Comparison - Become a Java Craftsman in 70 Examples」</title>
      <link href="/2020/08/24/jie-du-java-by-comparison-become-a-java-craftsman-in-70-examples/"/>
      <url>/2020/08/24/jie-du-java-by-comparison-become-a-java-craftsman-in-70-examples/</url>
      
        <content type="html"><![CDATA[<h1 id="解读「Java-By-Comparison-Become-a-Java-Craftsman-in-70-Examples」"><a href="#解读「Java-By-Comparison-Become-a-Java-Craftsman-in-70-Examples」" class="headerlink" title="解读「Java By Comparison - Become a Java Craftsman in 70 Examples」"></a>解读「Java By Comparison - Become a Java Craftsman in 70 Examples」</h1><h3 id="提高代码可读性"><a href="#提高代码可读性" class="headerlink" title="提高代码可读性"></a>提高代码可读性</h3><h5 id="避免反向思考"><a href="#避免反向思考" class="headerlink" title="避免反向思考"></a>避免反向思考</h5><pre><code>class Laboratory｛    Microscope microscope;    Result analyze(Sample sample)｛         if (microscope.isInorganic(sample))｛             return Result.INORGANIC;         ｝else｛             return analyzeOrganic(sample);         ｝     ｝     private Result analyzeOrganic(Sample sample)｛         if (!microscope.isHumanoid(sample))｛             return Result.ALIEN;         ｝else｛             return Result.HUMANOID;         ｝     ｝  ｝</code></pre><p>改造后</p><pre><code>class Laboratory {     Microscope microscope;    Result analyze(Sample sample) {        if (microscope.isOrganic(sample)) {            return analyzeOrganic(sample);         } else {            return Result.INORGANIC;         }    }    private Result analyzeOrganic(Sample sample) {        if (!microscope.isHumanoid(sample)) {            return Result.HUMANOID;         } else {            return Result.ALIEN;         }    } }</code></pre><h5 id="简化表达式"><a href="#简化表达式" class="headerlink" title="简化表达式"></a>简化表达式</h5><pre><code>class SpaceShip {    Crew crew;    FuelTank fuelTank;     Hull hull;    Navigator navigator;     OxygenTank oxygenTank;    boolean willCrewSurvive() {         return hull.holes == 0 &amp;&amp;             fuelTank.fuel &gt;= navigator.requiredFuelToEarth() &amp;&amp;             oxygenTank.lastsFor(crew.size) &gt; navigator.timeToEarth();    }}</code></pre><p>改造后</p><pre><code>class SpaceShip {    Crew crew;    FuelTank fuelTank;     Hull hull;    Navigator navigator;     OxygenTank oxygenTank;    boolean willCrewSurvive() {         boolean hasEnoughResources = hasEnoughFuel() &amp;&amp; hasEnoughOxygen();         return hull.isIntact() &amp;&amp; hasEnoughResources;    }    private boolean hasEnoughOxygen() {        return oxygenTank.lastsFor(crew.size) &gt; navigator.timeToEarth();    }    private boolean hasEnoughFuel() {        return fuelTank.fuel &gt;= navigator.requiredFuelToEarth();    }}</code></pre><h5 id="用空行来区分业务逻辑"><a href="#用空行来区分业务逻辑" class="headerlink" title="用空行来区分业务逻辑"></a>用空行来区分业务逻辑</h5><pre><code>enum DistanceUnit {     MILES, KILOMETERS;    static final double MILE_IN_KILOMETERS = 1.60934;    static final int IDENTITY = 1;    static final double KILOMETER_IN_MILES = 1 / MILE_IN_KILOMETERS;    double getConversionRate(DistanceUnit unit) {         if (this == unit) {            return IDENTITY;         }        if (this == MILES &amp;&amp; unit == KILOMETERS) {             return MILE_IN_KILOMETERS;        } else {            return KILOMETER_IN_MILES;        }     }}</code></pre><p>改造后</p><pre><code>enum DistanceUnit {     MILES, KILOMETERS;    static final double MILE_IN_KILOMETERS = 1.60934;    static final int IDENTITY = 1;    static final double KILOMETER_IN_MILES = 1 / MILE_IN_KILOMETERS;    double getConversionRate(DistanceUnit unit) {         if (this == unit) {            return IDENTITY;         }        if (this == MILES &amp;&amp; unit == KILOMETERS) {             return MILE_IN_KILOMETERS;        } else {            return KILOMETER_IN_MILES;        }     }}</code></pre><h5 id="用代码块区分业务逻辑"><a href="#用代码块区分业务逻辑" class="headerlink" title="用代码块区分业务逻辑"></a>用代码块区分业务逻辑</h5><pre><code>class BoardComputer {     CruiseControl cruiseControl;    void authorize(User user) {         Objects.requireNonNull(user);         if (user.isUnknown()) {             cruiseControl.logUnauthorizedAccessAttempt();        } else if (user.isAstronaut()) {             cruiseControl.grantAccess(user);        } else if (user.isCommander()) {             cruiseControl.grantAccess(user);            cruiseControl.grantAdminAccess(user);        }    }}</code></pre><p>改造后</p><pre><code>class BoardComputer {     CruiseControl cruiseControl;    void authorize(User user) {         Objects.requireNonNull(user);         if (user.isUnknown()) {             cruiseControl.logUnauthorizedAccessAttempt();            return;        }        if (user.isAstronaut()) {             cruiseControl.grantAccess(user);        } else if (user.isCommander()) {             cruiseControl.grantAccess(user);            cruiseControl.grantAdminAccess(user);        }    }}</code></pre><h5 id="用常量替换魔术数字"><a href="#用常量替换魔术数字" class="headerlink" title="用常量替换魔术数字"></a>用常量替换魔术数字</h5><pre><code>class CruiseControl {     private double targetSpeedKmh;     void setPreset(int speedPreset) {         if (speedPreset == 2) {             setTargetSpeedKmh(16944);         } else if (speedPreset == 1) {             setTargetSpeedKmh(7667);         } else if (speedPreset == 0) {             setTargetSpeedKmh(0);         }     }    void setTargetSpeedKmh(double speed) {         targetSpeedKmh = speed;     }}</code></pre><p>改造后</p><pre><code>class CruiseControl {     static final int STOP_PRESET = 0;     static final int PLANETARY_SPEED_PRESET = 1;     static final int CRUISE_SPEED_PRESET = 2;    static final double CRUISE_SPEED_KMH = 16944;     static final double PLANETARY_SPEED_KMH = 7667;     static final double STOP_SPEED_KMH = 0;    private double targetSpeedKmh;     void setPreset(int speedPreset) {         if (speedPreset == CRUISE_SPEED_PRESET) {             setTargetSpeedKmh(CRUISE_SPEED_KMH);         } else if (speedPreset == PLANETARY_SPEED_PRESET) {             setTargetSpeedKmh(PLANETARY_SPEED_KMH);         } else if (speedPreset == STOP_PRESET) {             setTargetSpeedKmh(STOP_SPEED_KMH);         }     }    void setTargetSpeedKmh(double speed) {         targetSpeedKmh = speed;     }}</code></pre><h5 id="用枚举代替常量"><a href="#用枚举代替常量" class="headerlink" title="用枚举代替常量"></a>用枚举代替常量</h5><pre><code>class CruiseControl {         static final int STOP_PRESET = 0;     static final int PLANETARY_SPEED_PRESET = 1;     static final int CRUISE_SPEED_PRESET = 2;    static final double CRUISE_SPEED_KMH = 16944;     static final double PLANETARY_SPEED_KMH = 7667;     static final double STOP_SPEED_KMH = 0;    private double targetSpeedKmh;     void setPreset(int speedPreset) {         if (speedPreset == CRUISE_SPEED_PRESET) {             setTargetSpeedKmh(CRUISE_SPEED_KMH);         } else if (speedPreset == PLANETARY_SPEED_PRESET) {             setTargetSpeedKmh(PLANETARY_SPEED_KMH);         } else if (speedPreset == STOP_PRESET) {             setTargetSpeedKmh(STOP_SPEED_KMH);         }     }    void setTargetSpeedKmh(double speed) {         targetSpeedKmh = speed;     }}</code></pre><p>改造后</p><pre><code>class CruiseControl {     private double targetSpeedKmh;     void setPreset(SpeedPreset speedPreset) {        Objects.requireNonNull(speedPreset);        setTargetSpeedKmh(speedPreset.speedKmh);    }    void setTargetSpeedKmh(double speed) {         targetSpeedKmh = speed;     }}enum SpeedPreset {     STOP(0), PLANETARY_SPEED(7667), CRUISE_SPEED(16944);     final double speedKmh;     SpeedPreset(double speedKmh) {         this.speedKmh = speedKmh;     } }</code></pre><h5 id="用字符Format取代字符相加"><a href="#用字符Format取代字符相加" class="headerlink" title="用字符Format取代字符相加"></a>用字符Format取代字符相加</h5><pre><code>class Mission {     Logbook logbook;    LocalDate start;    void update(String author, String message) {        LocalDate today = LocalDate.now();        String month = String.valueOf(today.getMonthValue());        String formattedMonth = month.length() &lt; 2 ? "0" + month : month; String entry = author.toUpperCase() + ": [" + formattedMonth + "-" +            today.getDayOfMonth() + "-" + today.getYear() + "](Day " + (ChronoUnit.DAYS.between(start, today) + 1) + ")&gt; " + message + System.lineSeparator();        logbook.write(entry);     }}</code></pre><p>改造后</p><pre><code>class Mission {     Logbook logbook;    LocalDate start;    void update(String author, String message) {        LocalDate today = LocalDate.now();        String entry = String.format("%S: [%tm-%&lt;te-%&lt;tY](Day %d)&gt; %s%n",            author, today,            ChronoUnit.DAYS.between(start, today) + 1, message);        logbook.write(entry);     }}</code></pre><h5 id="使用Java命名规范"><a href="#使用Java命名规范" class="headerlink" title="使用Java命名规范"></a>使用Java命名规范</h5><pre><code>class Rover {    static final double WalkingSpeed = 3;    final String SerialNumber;     double MilesPerHour;    Rover(String NewSerialNumber) {         SerialNumber = NewSerialNumber;    }    void Drive() {        MilesPerHour = WalkingSpeed;    }    void Stop() {        MilesPerHour = 0;     }}</code></pre><p>改造后</p><pre><code>class Rover {    static final double WALKING_SPEED = 3;    final String serialNumber;     double milesPerHour;    Rover(String serialNumber) {         serialNumber = serialNumber;    }    void drive() {        milesPerHour = WALKING_SPEED;    }    void stop() {        milesPerHour = 0;     }}</code></pre><h5 id="避免单字母变量"><a href="#避免单字母变量" class="headerlink" title="避免单字母变量"></a>避免单字母变量</h5><pre><code>class Inventory {    List&lt;Supply&gt; sl = new ArrayList&lt;&gt;();    boolean isInStock(String n) {         Supply s = new Supply(n); int l=0;        int h = sl.size() - 1;        while (l &lt;= h) {            int m = l + (h - l) / 2;            int c = sl.get(m).compareTo(s);            if (c &lt; 0) {                l = m + 1;            } else if (c&gt;0) {                 h = m - 1;            } else {                return true;            }         }        return false;     }}</code></pre><p>改造后</p><pre><code>class Inventory {    List&lt;Supply&gt; sortedList = new ArrayList&lt;&gt;();    boolean isInStock(String name) {         Supply supply = new Supply(name);         int low = 0;        int high = sortedList.size() - 1;        while (low &lt;= high) {            int middle=low+(high-low)/2;            int comparison = sortedList.get(middle).compareTo(supply);            if (comparison &lt; 0) {                 low = middle + 1;            } else if (comparison &gt; 0) {                 high = middle - 1;             } else {                return true;             }        }    } }</code></pre><h5 id="避免缩写"><a href="#避免缩写" class="headerlink" title="避免缩写"></a>避免缩写</h5><pre><code>class Logbook {    static final Path DIR = Paths.get("/var/log");    static final Path CSV = DIR.resolve("stats.csv");     static final String GLOB = "*.log";    void createStats() throws IOException {         try (DirectoryStream&lt;Path&gt; dirStr =                Files.newDirectoryStream(DIR, GLOB);                    BufferedWriter bufW = Files.newBufferedWriter(CSV)) {             for (Path lFile : dirStr) {                String csvLn = String.format("%s,%d,%s",                     lFile,                    Files.size(lFile),                    Files.getLastModifiedTime(lFile));                 bufW.write(csvLn);                bufW.newLine();             }        }     }}</code></pre><p>改造后</p><pre><code>class Logbook {    static final Path LOG_FOLDER = Paths.get("/var/log");    static final Path STATISTICS_CSV = LOG_FOLDER.resolve("stats.csv");     static final String FILE_FILTER = "*.log";    void createStatistics() throws IOException {         try (DirectoryStream&lt;Path&gt; logs =            Files.newDirectoryStream(LOG_FOLDER, FILE_FILTER);             BufferedWriter writer =                Files.newBufferedWriter(STATISTICS_CSV)) {             for (Path log : logs) {                String csvLine = String.format("%s,%d,%s",                     log,                    Files.size(log),                    Files.getLastModifiedTime(log));                                    writer.write(csvLine);                writer.newLine();             }        }     }}</code></pre><h5 id="避免过度命名"><a href="#避免过度命名" class="headerlink" title="避免过度命名"></a>避免过度命名</h5><pre><code>class MainSpaceShipManager {    AbstractRocketPropulsionEngine abstractRocketPropulsionEngine;     INavigationController navigationController;    boolean turboEnabledFlag;    void navigateSpaceShipTo(PlanetInfo planetInfo) {        RouteData data = navigationController.calculateRouteData(planetInfo);         LogHelper.logRouteData(data);         abstractRocketPropulsionEngine.invokeTask(data, turboEnabledFlag);    } }</code></pre><p>改造后</p><pre><code>class SpaceShip {     Engine engine;    Navigator navigator;     boolean turboEnabled;    void navigateTo(Planet destination) {        Route route = navigator.calculateRouteTo(destination);         Logger.log(route);        engine.follow(route, turboEnabled);    } }</code></pre><h5 id="尽早检查"><a href="#尽早检查" class="headerlink" title="尽早检查"></a>尽早检查</h5><pre><code>class CruiseControl {    static final double SPEED_OF_LIGHT_KMH = 1079252850;     static final double SPEED_LIMIT = SPEED_OF_LIGHT_KMH;    private double targetSpeedKmh;    void setTargetSpeedKmh(double speedKmh) {         if (speedKmh &lt; 0) {            throw new IllegalArgumentException();         } else if (speedKmh &lt;= SPEED_LIMIT) {             targetSpeedKmh = speedKmh;         } else {            throw new IllegalArgumentException();         }    } }</code></pre><p>改造后</p><pre><code>class CruiseControl {    static final double SPEED_OF_LIGHT_KMH = 1079252850;     static final double SPEED_LIMIT = SPEED_OF_LIGHT_KMH;    private double targetSpeedKmh;    void setTargetSpeedKmh(double speedKmh) {         if (speedKmh &lt; 0 || speedKmh &gt; SPEED_LIMIT) {            throw new IllegalArgumentException();         }        targetSpeedKmh = speedKmh;    } }</code></pre><h3 id="让你的代码更简洁"><a href="#让你的代码更简洁" class="headerlink" title="让你的代码更简洁"></a>让你的代码更简洁</h3><h5 id="避免无意义的比较"><a href="#避免无意义的比较" class="headerlink" title="避免无意义的比较"></a>避免无意义的比较</h5><pre><code>class Laboratory {     Microscope microscope;    Result analyze(Sample sample) {        if (microscope.isInorganic(sample) == true) {            return Result.INORGANIC;         } else {            return analyzeOrganic(sample);         }    }    private Result analyzeOrganic(Sample sample) {        if (microscope.isHumanoid(sample) == false) {            return Result.ALIEN;         } else {            return Result.HUMANOID;         }    } }</code></pre><p>改造后：</p><pre><code>class Laboratory {     Microscope microscope;    Result analyze(Sample sample) {        if (microscope.isInorganic(sample)) {            return Result.INORGANIC;         } else {            return analyzeOrganic(sample);         }    }    private Result analyzeOrganic(Sample sample) {        if (!microscope.isHumanoid(sample)) {            return Result.ALIEN;         } else {            return Result.HUMANOID;         }    } }</code></pre><h5 id="直接返回结果"><a href="#直接返回结果" class="headerlink" title="直接返回结果"></a>直接返回结果</h5><pre><code>class Astronaut {     String name;    int missions;    boolean isValid() {        if (missions &lt; 0 || name == null || name.trim().isEmpty()) {            return false;         } else {            return true;         }    }}</code></pre><p>改造后：</p><pre><code>class Astronaut {     String name;    int missions;    boolean isValid() {        return missions &lt; 0 || name == null || name.trim().isEmpty());    }}</code></pre><h5 id="用For-Each代替For"><a href="#用For-Each代替For" class="headerlink" title="用For-Each代替For"></a>用For-Each代替For</h5><pre><code>class LaunchChecklist {     List checks = Arrays.asList("Cabin Pressure",                                 "Communication",                                 "Engine");     Status prepareForTakeoff(Commander commander) {         for (int i = 0; i &lt; checks.size(); i++) {             boolean shouldAbortTakeoff = commander.isFailing(checks.get(i));             if (shouldAbortTakeoff) {                 return Status.ABORT_TAKE_OFF;             }         }         return Status.READY_FOR_TAKE_OFF;     }}</code></pre><p>改造后</p><pre><code>class LaunchChecklist {     List checks = Arrays.asList("Cabin Pressure",                                 "Communication",                                 "Engine");     Status prepareForTakeoff(Commander commander) {         for (String check : checks) {             boolean shouldAbortTakeoff = commander.isFailing(checks);             if (shouldAbortTakeoff) {                 return Status.ABORT_TAKE_OFF;             }         }         return Status.READY_FOR_TAKE_OFF;     }}</code></pre><h5 id="更多的使用Java-API"><a href="#更多的使用Java-API" class="headerlink" title="更多的使用Java API"></a>更多的使用Java API</h5><pre><code>class Inventory {    private List&lt;Supply&gt; supplies = new ArrayList&lt;&gt;();    int getQuantity(Supply supply) {         if (supply == null) {            throw new NullPointerException("supply must not be null");        int quantity = 0;        for (Supply supplyInStock : supplies) {            if (supply.equals(supplyInStock)) {                 quantity++;            }         }        return quantity;    }}</code></pre><p>改造后</p><pre><code>class Inventory {    private List&lt;Supply&gt; supplies = new ArrayList&lt;&gt;();    int getQuantity(Supply supply) {         Objects.requireNonNull(supply, "supply must not be null");        return Collections.frequency(supplies, supply);    }}</code></pre><h3 id="增强代码的健壮性"><a href="#增强代码的健壮性" class="headerlink" title="增强代码的健壮性"></a>增强代码的健壮性</h3><h5 id="避免空值异常"><a href="#避免空值异常" class="headerlink" title="避免空值异常"></a>避免空值异常</h5><pre><code>class Logbook {    void writeMessage(String message, Path location) throws IOException {         if (Files.isDirectory(location)) {            throw new IllegalArgumentException("The path is invalid!");         }        if (message.trim().equals("") || message == null) {            throw new IllegalArgumentException("The message is invalid!");        }        String entry = LocalDate.now() + ": " + message;        Files.write(location, Collections.singletonList(entry),            StandardCharsets.UTF_8,            StandardOpenOption.CREATE,            StandardOpenOption.APPEND);    }}</code></pre><p>改造后</p><pre><code>class Logbook {    void writeMessage(String message, Path location) throws IOException {        if (message == null || message.trim().isEmpty()) {            throw new IllegalArgumentException("The message is invalid!");        }        if (location == null || Files.isDirectory(location)) {            throw new IllegalArgumentException("The path is invalid!");         }        String entry = LocalDate.now() + ": " + message;        Files.write(location, Collections.singletonList(entry),            StandardCharsets.UTF_8,            StandardOpenOption.CREATE,            StandardOpenOption.APPEND);    }}</code></pre><h5 id="避免switch陷阱"><a href="#避免switch陷阱" class="headerlink" title="避免switch陷阱"></a>避免switch陷阱</h5><pre><code>class BoardComputer {     CruiseControl cruiseControl;    void authorize(User user) {         Objects.requireNonNull(user);         switch (user.getRank()) {            case UNKNOWN:                 cruiseControl.logUnauthorizedAccessAttempt();            case ASTRONAUT:                 cruiseControl.grantAccess(user);                 break;            case COMMANDER:                 cruiseControl.grantAccess(user);                cruiseControl.grantAdminAccess(user);                 break;        }    }}</code></pre><p>改造后</p><pre><code>class BoardComputer {     CruiseControl cruiseControl;    void authorize(User user) {         Objects.requireNonNull(user);         switch (user.getRank()) {            case UNKNOWN:                 cruiseControl.logUnauthorizedAccessAttempt();                break;            case ASTRONAUT:                 cruiseControl.grantAccess(user);                 break;            case COMMANDER:                 cruiseControl.grantAccess(user);                cruiseControl.grantAdminAccess(user);                 break;        }    }}</code></pre><blockquote><p>注意：这段switch还不够完美，可以考虑加上default来防止最终没有条件匹配的情况，也可以用{}把代码包起来，防止作用域的污染。</p></blockquote><h5 id="永远使用代码块（代码少并不永远代表更好的代码）"><a href="#永远使用代码块（代码少并不永远代表更好的代码）" class="headerlink" title="永远使用代码块（代码少并不永远代表更好的代码）"></a>永远使用代码块（代码少并不永远代表更好的代码）</h5><pre><code>class BoardComputer {     CruiseControl cruiseControl;    void authorize(User user) {        Objects.requireNonNull(user);         if (user.isUnknown())            cruiseControl.logUnauthorizedAccessAttempt();        if (user.isAstronaut())            cruiseControl.grantAccess(user);         if (user.isCommander())            cruiseControl.grantAccess(user);            cruiseControl.grantAdminAccess(user);    }}</code></pre><p>改造后</p><pre><code>class BoardComputer {     CruiseControl cruiseControl;    void authorize(User user) {        Objects.requireNonNull(user);         if (user.isUnknown()) {            cruiseControl.logUnauthorizedAccessAttempt();        }        if (user.isAstronaut()) {            cruiseControl.grantAccess(user);         }        if (user.isCommander()) {            cruiseControl.grantAccess(user);            cruiseControl.grantAdminAccess(user);        }    }}</code></pre><h5 id="避免ConcurrentModificationException错误"><a href="#避免ConcurrentModificationException错误" class="headerlink" title="避免ConcurrentModificationException错误"></a>避免ConcurrentModificationException错误</h5><pre><code>class Inventory {    private List&lt;Supply&gt; supplies = new ArrayList&lt;&gt;();    void disposeContaminatedSupplies() {         for (Supply supply : supplies) {             if (supply.isContaminated()) {                 supplies.remove(supply);             }        }     }}</code></pre><p>改造后</p><pre><code>class Inventory {    private List&lt;Supply&gt; supplies = new ArrayList&lt;&gt;();    void disposeContaminatedSupplies() {         Iterator&lt;Supply&gt; iterator = supplies.iterator();         while (iterator.hasNext()) {            if (iterator.next().isContaminated()) {                 iterator.remove();            }         }    }}</code></pre><h5 id="捕捉特定的异常"><a href="#捕捉特定的异常" class="headerlink" title="捕捉特定的异常"></a>捕捉特定的异常</h5><pre><code>class TransmissionParser {    static Transmission parse(String rawMessage) {        if (rawMessage != null &amp;&amp; rawMessage.length() != Transmission.MESSAGE_LENGTH) {            throw new IllegalArgumentException("Bad message received!");         }        String rawId = rawMessage.substring(0, Transmission.ID_LENGTH);         String rawContent = rawMessage.substring(Transmission.ID_LENGTH);        try {            int id = Integer.parseInt(rawId);             String content = rawContent.trim();             return new Transmission(id, content);        } catch (Exception e) {            throw new IllegalArgumentException("Bad message received!");        }    } }</code></pre><p>改造后</p><pre><code>class TransmissionParser {    static Transmission parse(String rawMessage) {        if (rawMessage != null&amp;&amp; rawMessage.length() != Transmission.MESSAGE_LENGTH) {            throw new IllegalArgumentException("Bad message received!");         }        String rawId = rawMessage.substring(0, Transmission.ID_LENGTH);         String rawContent = rawMessage.substring(Transmission.ID_LENGTH);        try {            int id = Integer.parseInt(rawId);             String content = rawContent.trim();             return new Transmission(id, content);        } catch (NumberFormatException e) {            throw new IllegalArgumentException("Bad message received!");        }    } }</code></pre><h5 id="尽量用不可变代替可变"><a href="#尽量用不可变代替可变" class="headerlink" title="尽量用不可变代替可变"></a>尽量用不可变代替可变</h5><pre><code>class Distance {     DistanceUnit unit;     double value;    Distance(DistanceUnit unit, double value) {         this.unit = unit;        this.value = value;    }    static Distance km(double value) {        return new Distance(DistanceUnit.KILOMETERS, value);    }    void add(Distance distance) {         distance.convertTo(unit); value += distance.value;    }    void convertTo(DistanceUnit otherUnit) {        double conversionRate = unit.getConversionRate(otherUnit);         unit = otherUnit;        value = conversionRate * value;    }}</code></pre><p>改造后</p><pre><code>class Distance {     final DistanceUnit unit;     final double value;    Distance(DistanceUnit unit, double value) {         this.unit = unit;        this.value = value;    }    Distance add(Distance distance) {         return new Distance(unit, value + distance.convertTo(unit).value);    }    Distance convertTo(DistanceUnit otherUnit) {        double conversionRate = unit.getConversionRate(otherUnit);         return new Distance(otherUnit, conversionRate * value);    }}</code></pre><h5 id="用Optional代替Null"><a href="#用Optional代替Null" class="headerlink" title="用Optional代替Null"></a>用Optional代替Null</h5><pre><code>class Communicator {    Connection connectionToEarth;    void establishConnection() {        // used to set connectionToEarth, but may be unreliable    }    Connection getConnectionToEarth() {         return connectionToEarth;    } }</code></pre><p>改造后</p><pre><code>class Communicator {    Connection connectionToEarth;    void establishConnection() {        // used to set connectionToEarth, but may be unreliable    }    Optional&lt;Connection&gt; getConnectionToEarth() {         return Optional.ofNullable(connectionToEarth);    } }</code></pre><blockquote><p>调用示例：</p></blockquote><pre><code>communicationSystem.getConnectionToEarth()    .ifPresent(connection -&gt;        connection.send("Houston, we got a problem!") );</code></pre><h3 id="提高代码运行效率"><a href="#提高代码运行效率" class="headerlink" title="提高代码运行效率"></a>提高代码运行效率</h3><h5 id="避免在循环中做耗时运算"><a href="#避免在循环中做耗时运算" class="headerlink" title="避免在循环中做耗时运算"></a>避免在循环中做耗时运算</h5><pre><code>class Inventory {    private List&lt;Supply&gt; supplies = new ArrayList&lt;&gt;();    List&lt;Supply&gt; find(String regex) {         List&lt;Supply&gt; result = new LinkedList&lt;&gt;();         for (Supply supply : supplies) {            if (Pattern.matches(regex, supply.toString())) {                 result.add(supply);            }        }        return result;     }}</code></pre><p>改造后</p><pre><code>class Inventory {    private List&lt;Supply&gt; supplies = new ArrayList&lt;&gt;();    List&lt;Supply&gt; find(String regex) {         List&lt;Supply&gt; result = new LinkedList&lt;&gt;();        Pattern pattern = Pattern.compile(regex);         for (Supply supply : supplies) {            if (pattern.matcher(supply.toString()).matches()) {                 result.add(supply);            }        }        return result;     }}</code></pre><h5 id="利用Java8的parallel"><a href="#利用Java8的parallel" class="headerlink" title="利用Java8的parallel"></a>利用Java8的parallel</h5><pre><code>class Inventory {     List&lt;Supply&gt; supplies;    long countDifferentKinds() {         return supplies.stream()                        .sequential() // this can be omitted                         .filter(Supply::isUncontaminated)                         .map(Supply::getName)                        .distinct()                        .count();    } }</code></pre><p>改造后</p><pre><code>class Inventory {     List&lt;Supply&gt; supplies;    long countDifferentKinds() {         return supplies.stream()                        .parallel()                        .filter(Supply::isUncontaminated)                         .map(Supply::getName)                        .distinct()                        .count();    } }</code></pre><h3 id="改进代码的注释"><a href="#改进代码的注释" class="headerlink" title="改进代码的注释"></a>改进代码的注释</h3><h5 id="避免没有意义的注释"><a href="#避免没有意义的注释" class="headerlink" title="避免没有意义的注释"></a>避免没有意义的注释</h5><pre><code>class Inventory {    // Fields (we only have one)    List&lt;Supply&gt;supplies=newArrayList&lt;&gt;(); // The list of supplies.    // Methods    int countContaminatedSupplies() {        // TODO: check if field is already initialized (not null)        int contaminatedCounter = 0; // the counter        // No supplies =&gt; no contamination        for (Supply supply : supplies) { // begin FOR            if (supply.isContaminated()) {                 contaminatedCounter++; // increment counter!            } // End IF supply is contaminated         } // End FOR        // Returns the number of contaminated supplies.             return contaminatedCounter; // Handle with care!    }} // End of Inventory class</code></pre><p>改造后</p><pre><code>class Inventory {    List&lt;Supply&gt;supplies=newArrayList&lt;&gt;();    // Methods    int countContaminatedSupplies() {        if (supplies == null || supplies.isEmpty()) {            // No supplies =&gt; no contamination            return 0;        }        int contaminatedCounter = 0;        for (Supply supply : supplies) {            if (supply.isContaminated()) {                 contaminatedCounter++;            }        }        return contaminatedCounter;    }}</code></pre><h5 id="移除注释掉的代码"><a href="#移除注释掉的代码" class="headerlink" title="移除注释掉的代码"></a>移除注释掉的代码</h5><pre><code>class LaunchChecklist {    List&lt;String&gt; checks = Arrays.asList(         "Cabin Leak",        // "Communication", // Do we actually want to talk to Houston? "Engine",        "Hull",        // "Rover", // We won't need it, I think...        "OxygenTank"         //"Supplies"    );    Status prepareLaunch(Commander commander) {         for (String check : checks) {            boolean shouldAbortTakeoff = commander.isFailing(check);             if (shouldAbortTakeoff) {                //System.out.println("REASON FOR ABORT: " + item);                return Status.ABORT_TAKE_OFF; }            }            return Status.READY_FOR_TAKE_OFF;         }    }}</code></pre><p>改造后</p><pre><code>class LaunchChecklist {    List&lt;String&gt; checks = Arrays.asList(         "Cabin Leak",        "Hull",        "OxygenTank"     );    Status prepareLaunch(Commander commander) {         for (String check : checks) {            boolean shouldAbortTakeoff = commander.isFailing(check);             if (shouldAbortTakeoff) {                return Status.ABORT_TAKE_OFF; }            }            return Status.READY_FOR_TAKE_OFF;         }    }}</code></pre><h5 id="用方法代替注释"><a href="#用方法代替注释" class="headerlink" title="用方法代替注释"></a>用方法代替注释</h5><pre><code>class FuelSystem {    List&lt;Double&gt; tanks = new ArrayList&lt;&gt;();    int getAverageTankFillingPercent() {         double sum = 0;        for (double tankFilling : tanks) {             sum += tankFilling;        }        double averageFuel = sum / tanks.size();        // round to integer percent        return Math.toIntExact(Math.round(averageFuel * 100));    } }</code></pre><p>改造后</p><pre><code>class FuelSystem {    List&lt;Double&gt; tanks = new ArrayList&lt;&gt;();    int getAverageTankFillingPercent() {         double sum = 0;        for (double tankFilling : tanks) {             sum += tankFilling;        }        double averageFuel = sum / tanks.size();        return roundToIntegerPercent(averageFuel);    }     static int roundToIntegerPercent(double value) {         return Math.toIntExact(Math.round(value * 100));    }}</code></pre><h5 id="用文档解释缘由"><a href="#用文档解释缘由" class="headerlink" title="用文档解释缘由"></a>用文档解释缘由</h5><pre><code>class Inventory {    private List&lt;Supply&gt; list = new ArrayList&lt;&gt;();    void add(Supply supply) {         list.add(supply);         Collections.sort(list);    }    boolean isInStock(String name) {        // fast implementation        return Collections.binarySearch(list, new Supply(name)) != -1;    } }</code></pre><p>改造后</p><pre><code>class Inventory {    // Keep this list sorted. See isInStock().    private List&lt;Supply&gt; list = new ArrayList&lt;&gt;();    void add(Supply supply) {         list.add(supply);         Collections.sort(list);    }    boolean isInStock(String name) {        /*        * In the context of checking availability of supplies by name, * facing severe performance issues with &gt;1000 supplies        * we decided to use the binary search algorithm        * to achieve item retrieval within 1 second,        * accepting that we must keep the supplies sorted.        */        return Collections.binarySearch(list, new Supply(name)) != -1;    } }</code></pre><h5 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h5><pre><code>class Supply {    /**    * The code universally identifies a supply. *    * It follows a strict format, beginning with an S (for supply), followed    * by a five digit inventory number. Next comes a backslash that    * separates the country code from the preceding inventory number. This    * country code must be exactly two capital letters standing for one of    * the participating nations (US, EU, RU, CN). After that follows a dot    * and the actual name of the supply in lowercase letters. */    static final Pattern CODE =         Pattern.compile("^S\\d{5}\\\\(US|EU|RU|CN)\\.[a-z]+$");}</code></pre><p>改造后</p><pre><code>class Supply {    /**    * The expression universally identifies a supply code. *    * Format: "S&lt;inventory-number&gt;\&lt;COUNTRY-CODE&gt;.&lt;name&gt;" *    * Valid examples: "S12345\US.pasta", "S08342\CN.wrench", * "S88888\EU.laptop", "S12233\RU.brush"    *    * Invalid examples:    * "R12345\RU.fuel"    * "S1234\US.light"    * "S01234\AI.coconut"    * " S88888\EU.laptop "    */    static final Pattern SUPPLY_CODE =         Pattern.compile("^S\\d{5}\\\\(US|EU|RU|CN)\\.[a-z]+$");    }</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目管理和「人月神话」</title>
      <link href="/2020/08/14/xiang-mu-guan-li-he-ren-yue-shen-hua/"/>
      <url>/2020/08/14/xiang-mu-guan-li-he-ren-yue-shen-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="项目管理和「人月神话」"><a href="#项目管理和「人月神话」" class="headerlink" title="项目管理和「人月神话」"></a>项目管理和「人月神话」</h1><h3 id="当我们讨论要开发一个系统的时候，我们讨论的是什么？"><a href="#当我们讨论要开发一个系统的时候，我们讨论的是什么？" class="headerlink" title="当我们讨论要开发一个系统的时候，我们讨论的是什么？"></a>当我们讨论要开发一个系统的时候，我们讨论的是什么？</h3><p><img src="http://cdn.bb-hire.cn/15973075442973.jpg"></p><h3 id="为什么我们通常会低估开发所需要的时间"><a href="#为什么我们通常会低估开发所需要的时间" class="headerlink" title="为什么我们通常会低估开发所需要的时间"></a>为什么我们通常会低估开发所需要的时间</h3><p><img src="http://cdn.bb-hire.cn/15973090535586.jpg"><br><img src="http://cdn.bb-hire.cn/15973091292927.jpg"></p><h3 id="我们为什么要强调单元测试"><a href="#我们为什么要强调单元测试" class="headerlink" title="我们为什么要强调单元测试"></a>我们为什么要强调单元测试</h3><p><img src="http://cdn.bb-hire.cn/15973093917523.jpg"><br><img src="http://cdn.bb-hire.cn/15973094021450.jpg"></p><h3 id="当项目延误的时候，我们应该怎么办？"><a href="#当项目延误的时候，我们应该怎么办？" class="headerlink" title="当项目延误的时候，我们应该怎么办？"></a>当项目延误的时候，我们应该怎么办？</h3><p><img src="http://cdn.bb-hire.cn/15973100855700.jpg"></p><ol><li>增加人手</li><li>调整计划</li><li>削减任务</li></ol><h3 id="为什么我们需要项目周会？"><a href="#为什么我们需要项目周会？" class="headerlink" title="为什么我们需要项目周会？"></a>为什么我们需要项目周会？</h3><p><img src="http://cdn.bb-hire.cn/15973109771715.jpg"></p><h3 id="开项目会议的时候，我们讨论什么？"><a href="#开项目会议的时候，我们讨论什么？" class="headerlink" title="开项目会议的时候，我们讨论什么？"></a>开项目会议的时候，我们讨论什么？</h3><ol><li>每个人进度的检查与调整</li><li>分析每个人遇到的困难，与分享成功经验</li><li>对业务的不断梳理和加深理解</li></ol><h3 id="文档的重要性"><a href="#文档的重要性" class="headerlink" title="文档的重要性"></a>文档的重要性</h3><p><img src="http://cdn.bb-hire.cn/15973115367447.jpg"><br><img src="http://cdn.bb-hire.cn/15973115477814.jpg"></p><blockquote><p>开发计划和设计文档不是一次性的，而是需要一直维护的</p></blockquote><h3 id="人月估算和开发计划的区别"><a href="#人月估算和开发计划的区别" class="headerlink" title="人月估算和开发计划的区别"></a>人月估算和开发计划的区别</h3><p>对象不同。<br>人月估算是提供给上级的管理人员，用于掌握项目的资源使用量和项目最终上线时间。<br>开发计划是提供给具体的开发人员，用于开发人员确认自己的工作内容。<br>开发计划需要根据每个人的开发进度，做弹性调整，而不是一成不变。</p><h3 id="防微杜渐"><a href="#防微杜渐" class="headerlink" title="防微杜渐"></a>防微杜渐</h3><p><img src="http://cdn.bb-hire.cn/15973146225039.jpg"></p><h3 id="拥抱变化"><a href="#拥抱变化" class="headerlink" title="拥抱变化"></a>拥抱变化</h3><p>以前的开发<br><img src="http://cdn.bb-hire.cn/15973148796592.jpg"><br><img src="http://cdn.bb-hire.cn/15973150680480.jpg"><br><img src="http://cdn.bb-hire.cn/15973150809413.jpg"><br><img src="http://cdn.bb-hire.cn/15973150508232.jpg"><br>现在的开发<br><img src="http://cdn.bb-hire.cn/15973150140260.jpg"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理 </tag>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
